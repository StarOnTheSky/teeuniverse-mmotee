name: Editor Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-cmake:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, macos-11, windows-latest, windows-2019]
        include:
        - name: "Ubuntu-Latest x86_64"
          os: ubuntu-latest
          cmake-args: -G "Unix Makefiles"
          build-args: --parallel
          package-file: teeuniverse-linux_x86_64.zip
          env:
            CFLAGS: -Wdeclaration-after-statement -Wduplicated-branches -Werror
            CXXFLAGS: -Wduplicated-branches -Werror
            
        - name: "macOS 10.15"
          os: macos-latest
          cmake-args: -G "Unix Makefiles"
          build-args: --parallel
          package-file: teeuniverse-macos-10.15.zip
          env:
            CFLAGS: -Wdeclaration-after-statement -Wduplicated-branches -Werror
            CXXFLAGS: -Wduplicated-branches -Werror

        - name: "macOS 11"
          os: macos-11
          cmake-args: -G "Unix Makefiles"
          build-args: --parallel
          package-file: teeuniverse-macos-11.zip
          env:
            CFLAGS: -Wdeclaration-after-statement -Wduplicated-branches -Werror
            CXXFLAGS: -Wduplicated-branches -Werror

        - name: "Windows x64"
          os: windows-latest
          cmake-args: -G "Visual Studio 16 2019" -A x64
          package-file: teeuniverse-win64.zip
          env:
            CFLAGS: /WX
            CXXFLAGS: /WX
            LDFLAGS: /WX

        - name: "Windows x86"
          os: windows-2019
          cmake-args: -G "Visual Studio 16 2019" -A Win32
          package-file: teeuniverse-win32.zip
          env:
            CFLAGS: /WX
            CXXFLAGS: /WX
            LDFLAGS: /WX

    steps:
    - name: Checkout submodules
      uses: actions/checkout@v2
      with:
        submodules: true

    - name: Prepare Linux
      if: contains(matrix.os, 'ubuntu')
      run: |
        sudo apt-get update -y
        sudo apt-get install pkg-config cmake libfreetype6-dev libsdl2-dev libicu-dev libssl-dev libcurl4-openssl-dev -y
        sudo apt-get install libboost-dev libmariadbclient-dev libmysqlcppconn-dev libopus-dev libopusfile-dev -y

    - name: Prepare macOS
      if: contains(matrix.os, 'macos')
      run: |
        #sudo port update
        #sudo port install cmake git freetype harfbuzz harfbuzz-icu libsdl2 icu
        #brew update
        #brew install sdl2 icu4c freetype harfbuzz

        vcpkg install icu harfbuzz[core,icu] sdl2 opengl freetype
        vcpkg integrate install

    - name: Prepare Windows
      if: contains(matrix.os, 'windows')
      run: |
        vcpkg install icu harfbuzz[core.icu] sdl2 opengl freetype
        vcpkg install icu harfbuzz[core,icu] sdl2 opengl freetype --triplet=x64-windows
        vcpkg integrate install

    - name: Build
      env: ${{ matrix.env }}
      run: |
        mkdir build
        cd build
        ${{ matrix.cmake-path }}cmake ${{ matrix.cmake-args }} -DCMAKE_BUILD_TYPE=Release -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE=. ..

    - name: Package(Linux)
      if: contains(matrix.os, 'ubuntu')
      run: |
        cd build/build/release
        mv linux teeuniverse
        zip -r9 ${{ matrix.package-file }} teeuniverse
        mv ${{ matrix.package-file }} ${{ github.workspace }}

    - name: Package(macOS)
      if: contains(matrix.os, 'macos')
      run: |
        cd build/build/release
        mv macos teeuniverse
        zip -r9 ${{ matrix.package-file }} teeuniverse
        mv ${{ matrix.package-file }} ${{ github.workspace }}

    - name: Package(macOS)
      if: contains(matrix.os, 'windows')
      run: |
        cd build/build/release
        mv windows teeuniverse
        zip -r9 ${{ matrix.package-file }} teeuniverse
        mv ${{ matrix.package-file }} ${{ github.workspace }}

    - name: Upload Artifacts
      uses: actions/upload-artifact@v2-preview
      with:
        name: ${{ matrix.name }}
        path: ${{ matrix.package-file }}

